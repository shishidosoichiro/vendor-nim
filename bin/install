#!/usr/bin/env sh

# Exit, if return non-zero or use an undefined variable.
set -eu

cd "$(dirname "$0")/.."

# Variables
DEFAULT_VERSION=$(./bin/versions | tail -1)
VERSION=${1:-$DEFAULT_VERSION}

if [ -z "$VERSION" ]; then
	echo "target version not specified." >&2
	exit 1
fi

# specify url
os=$(./bin/os)
distro=$(./bin/distro)

if [ $os = windows ]; then
	ARCHITECTURE=x64
	ARCHIVE_BASE=nim-$VERSION
	ARCHIVE_FILE=${ARCHIVE_BASE}_${ARCHITECTURE}.zip
	DOWNLOAD_URL=https://nim-lang.org/download/$ARCHIVE_FILE
else
	ARCHIVE_BASE=nim-$VERSION
	ARCHIVE_FILE=${ARCHIVE_BASE}.tar.xz
	DOWNLOAD_URL=https://nim-lang.org/download/$ARCHIVE_FILE
	if [ $VERSION = 0.19.6 ]; then
		DOWNLOAD_URL=https://github.com/nim-lang/Nim/archive/v$VERSION.tar.gz
	fi
fi

# Install
installForWindows() {
	version=$1
	cd versions/$version
	#nim.exe is not in your PATH environment variable.
  #Should it be added permanently? (y/n) n
  #** is not in your PATH environment variable.
  #Should it be added permanently? (y/n) n
  #The following *incompatible* MingW installations exist
  #C:\Program Files\Git\mingw64\bin
  #*incompatible* means Nim and GCC disagree on the size of a pointer.
  #No compatible MingW candidates found in the standard locations [Error]
  #Do you want to download MingW from Nim's website? (y/n)
  #Patching Nim's config to use:
  #D:\shishidosoichiro\Documents\seap\draft\nim\dev\nim\versions\0.19.2\main\dist\mingw64\bin
  #Would like to add Nim-0.19.2 to your start menu? (y/n)
  echo -e "n\nn\ny\nn\n" | ./finish.exe
	cd ../..
}


verlte() {
	[  "$1" = "`echo -e "$1\n$2" | sort --version-sort | head -n1`" ]
}

verlt() {
	[ "$1" = "$2" ] && return 1 || verlte $1 $2
}

build() {
	version=$1
	cd versions/$version
	if [ $version = 0.19.6 ]; then
		sh build_all.sh
		bin/nim c koch
		./koch tools
	elif versionlte "$version" 1.2.2; then
		sh build.sh
		bin/nim c koch
		./koch tools
	else
		sh build.sh
		bin/nim c koch
		./koch boot -d:release
		./koch tools
	fi
	cd ../..
}

# Start
echo "install: $VERSION"
echo "clean: temp"
rm -rf temp
echo "download: $DOWNLOAD_URL"
filename=$(./bin/download $DOWNLOAD_URL)
echo "extract: $filename"
./bin/extract "$filename" "versions/$VERSION"
echo "build $VERSION"
if [ $os = windows ]; then
	installForWindows $VERSION
else
	build $VERSION
fi
exit 0
